


configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION

	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			//javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {

		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = JAVADOC_SOURCE_LEVEL
		targetCompatibility = JAVADOC_COMPILER_LEVEL
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	task sourcesJar(type: Jar) {
		classifier = "sources"
		from sourceSets.main.allJava
	}

	task javaDocJar(type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
		archives sourcesJar, javaDocJar
	}

	jar {
		manifest {
			attributes (
					'Implementation': version,
					'Specification-Version': version,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}




	repositories {
		mavenLocal()
		 maven {
	        url "https://maven.aliyun.com/nexus/content/groups/public"
	    }
		
		mavenCentral()

	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false
	}

	sourceSets {
		main {
			java {
				srcDir 'src/main/java'

			}
			resources {
				srcDir 'src/main/resources'

			}
//			compileClasspath = configurations.compile + configurations.runtime
		}
		test {
			java {
				srcDir 'src/test/java'

			}
			resources {
				srcDir 'src/test/resources'

			}

		}

	}


	configurations {
		//屏蔽log4j
		api.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	dependencies {
		testImplementation 'junit:junit:4.12'
		//compile 'net.sf.json-lib:json-lib:2.4-jdk15'
		api(

				[group: 'com.bbossgroups', name: 'bboss-schedule', version: "${bboss_version}", transitive: true],
				
		)
		//采用log4j2记录日志
		api(
				[group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j2_version}", transitive: false],
				[group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2_version}", transitive: false],
				[group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j2_version}", transitive: true],
		)
		runtimeOnly(
				[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true],
		)
	}



	task copyJarFiles(type: Sync,dependsOn:'jar'){
		from fileTree(dir: 'lib', include: '**/*.jar')
		from configurations.api{
			canBeResolved=true

		}
		from jar.outputs
		exclude { details -> details.file.name.startsWith('bboss-rt')  }
		into 'build/dist/lib'

	}

	task copyRTJarFiles(type: Copy,dependsOn:'copyJarFiles'){
		from configurations.runtimeOnly{
			canBeResolved=true

		} - configurations.api{
			canBeResolved=true

		}
		into 'build/dist'
	}
	task copyToolFiles(type: Copy ,dependsOn:'copyRTJarFiles')  {
		from ('runfiles')
				{
					expand(
							bboss_version:"${bboss_version}"
					)

				}
		filteringCharset = 'UTF-8'
		into 'build/dist/'



	}
	task copyResourcesfiles(type: Sync )  {
		from fileTree(dir: 'src/test/resources')
		filteringCharset = 'UTF-8'
		into 'build/dist/resources'
	}

	task releaseVersion(type: Zip,dependsOn:['copyToolFiles','copyResourcesfiles']) {

		//appendix = 'wrapper'
		archiveClassifier = 'released'
		from 'build/dist/'

	}

}



